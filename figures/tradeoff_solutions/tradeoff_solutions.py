import pandas as pd
import os as os
import numpy as np
dir_path = os.path.dirname(os.path.realpath(__file__))
import re
import shutil
import subprocess
import matplotlib.pyplot as plt
import scienceplots
plt.style.use(['science', "ieee"])

def optimize_svg(path):
    # Run SVGO if available
    if shutil.which("svgo") is not None:
        subprocess.run([shutil.which("svgo"), path])


def latex_to_db(filename):
    # Read the LaTeX file
    with open(filename, "r", encoding="utf-8") as f:
        tex = f.read().replace("\\hline", "").replace("\n", "").split("\\\\")
    # Filter only rows containing '&'
    rows = [r for r in tex if '&' in r]


    rows = [r.strip() for r in tex if '&' in r.replace("\\&", "")]
    # Split into columns
    # Keep only items with a real &
    filtered = [s for s in rows if re.search(r'(?<!\\)&', s)]

    # Split each item at unescaped &
    split_items = [re.split(r'(?<!\\)&', s) for s in filtered]

    # Optionally, remove whitespace and unescape \&
    split_items = [[item.replace('\\&', '&').strip() for item in group] for group in split_items]
    split_items[0][0] = (re.sub(r'^.*?}([^}]*)$', r'\1', split_items[0][0]))
    headers = split_items[0][1:]
    index = [row[0] for row in split_items[1:]]
    data = split_items[1:][:]

    data = np.int8(np.transpose(np.transpose(data)[1:][:]))

    df = pd.DataFrame(data, columns=headers, index=index)
    return df

def read(name):
    tradeoff_data = os.path.join(dir_path, "input", rf"tradeoff_{name}.txt")
    data = latex_to_db(tradeoff_data)
    weights_file = os.path.join(dir_path, "input", rf"weights_means.txt")
    weights = latex_to_db(weights_file)

    non_normalized_output = weights.T.dot(data)
    
    total_weights = weights.sum(0)
    norm_output = ((non_normalized_output.div(total_weights, axis=0)) * 1).round(2)
    return norm_output

def plot(input, name): 
    plt.figure(figsize=(5,3))
    input.boxplot()
    plt.ylabel("Normalized score")
    plt.title("Category Comparison")
    plt.xticks(rotation=45)
    plt.grid(True, linestyle="--", alpha=0.5)
    plt.tight_layout()

    save_path = os.path.join(dir_path, "output", rf"plot_{name}.svg")
    plt.savefig(save_path, transparent=True)
    optimize_svg(save_path)

def print_latex_table(df, name):
    latex = df.to_csv(sep="&")
    latex = latex.replace("&", " & ").replace("\n", "\n \\\\")
    table = [r"%Automatically generated by figures/tradeoff_solutions/tradeoff_solutions.py",
             r"{\small\begin{longtblr}[",
             rf"label = {{WT_{name}}},",
             r"entry = none,",
             rf"caption = {{Tradeoff for the different solutions: {name.replace("_", " ")}}}",
             r"]{",
             r"width = {\linewidth},",
             r"colspec = {Q[40, font=\bfseries]Q[20, c]Q[20, c]Q[20, c]Q[20, c]Q[20, c]Q[20, c]Q[20, c]},",
             r"column{2-Z} = {cmd=\colornum},",
             r"abovesep=1pt, belowsep=1pt, leftsep=0.5pt, rightsep=0.5pt,",
             r"hline{1,2,Z},"
             r"}",
             latex,
             r"\end{longtblr}}",
    ]   
    latex_tot = "\n".join(table)

    save_path = os.path.join(dir_path, "output", rf"WT_{name}.tex")
    print(save_path)
    with open(save_path, "w", encoding="utf-8") as f:
        f.write(latex_tot)

names = ["PV_and_agri", "connection", "maintenance"]
# names = ["PV_and_agri", "connection", "maintenance"]
for n in names:
    norm_output = read(n)
    print(norm_output)
    print_latex_table(norm_output, n)
    plot(norm_output,n)